"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferCluster = void 0;
const lumos_1 = require("@ckb-lumos/lumos");
const helpers_1 = require("../../../helpers");
const cluster_1 = require("../../joints/cluster");
async function transferCluster(props) {
    // Env
    const config = props.config;
    const indexer = new lumos_1.Indexer(config.ckbIndexerUrl, config.ckbNodeUrl);
    // Get TransactionSkeleton
    let txSkeleton = lumos_1.helpers.TransactionSkeleton({
        cellProvider: indexer,
    });
    // Find cluster by OutPoint
    const clusterCell = await (0, cluster_1.getClusterCellByOutPoint)(props.clusterOutPoint, config);
    // Add cluster to Transaction.inputs and Transaction.outputs
    const injectInputResult = await (0, cluster_1.injectLiveClusterCell)({
        txSkeleton,
        clusterCell,
        addOutput: true,
        updateOutput(cell) {
            cell.cellOutput.lock = props.toLock;
            return cell;
        },
        config,
    });
    txSkeleton = injectInputResult.txSkeleton;
    // Inject needed capacity and pay fee
    const injectCapacityAndPayFeeResult = await (0, helpers_1.injectCapacityAndPayFee)({
        txSkeleton,
        changeAddress: props.changeAddress,
        fromInfos: props.fromInfos,
        fee: lumos_1.BI.from(0),
        config,
    });
    txSkeleton = injectCapacityAndPayFeeResult.txSkeleton;
    return {
        txSkeleton,
        inputIndex: injectInputResult.inputIndex,
        outputIndex: injectInputResult.outputIndex,
    };
}
exports.transferCluster = transferCluster;
//# sourceMappingURL=transferCluster.js.map