import { FromInfo } from '@ckb-lumos/common-scripts';
import { BI, helpers, RPC } from '@ckb-lumos/lumos';
import { Address } from '@ckb-lumos/base';
import { BIish } from '@ckb-lumos/bi';
import { SporeConfig } from '../config';
import { createCapacitySnapshot } from './capacity';
/**
 * Get minimal acceptable fee rate from RPC.
 */
export declare function getMinFeeRate(rpc: RPC): Promise<BI>;
/**
 * Pay transaction fee by getting the minimal acceptable fee rate from the RPC.
 */
export declare function payFeeByMinFeeRate(props: {
    txSkeleton: helpers.TransactionSkeletonType;
    fromInfos: FromInfo[];
    config: SporeConfig;
}): Promise<helpers.TransactionSkeletonType>;
/**
 * Pay fee by minimal acceptable fee rate from the RPC,
 * of pay fee by a manual fee rate.
 */
export declare function payFee(props: {
    txSkeleton: helpers.TransactionSkeletonType;
    fromInfos: FromInfo[];
    config: SporeConfig;
    feeRate?: BIish;
}): Promise<helpers.TransactionSkeletonType>;
/**
 * Inject needed amount of capacity,
 * and then pay fee by minimal acceptable fee rate or by a manual fee rate.
 */
export declare function injectCapacityAndPayFee(props: {
    txSkeleton: helpers.TransactionSkeletonType;
    fromInfos: FromInfo[];
    config: SporeConfig;
    feeRate?: BIish;
    fee?: BIish;
    changeAddress?: Address;
    enableDeductCapacity?: boolean;
}): Promise<{
    txSkeleton: helpers.TransactionSkeletonType;
    before: ReturnType<typeof createCapacitySnapshot>;
    after: ReturnType<typeof createCapacitySnapshot>;
}>;
