{"version":3,"file":"collector.js","names":["CKBCellCollector","constructor","terminableCellFetcher","queries","otherQueryOptions","defaultQuery","lock","undefined","type","argsLen","data","fromBlock","toBlock","order","skip","outputDataLenRange","outputCapacityRange","bufferSize","Array","isArray","map","query","forEach","validateQueryOption","convertQueryOptionToSearchKey","Error","instanceOfScriptWrapper","validators","ValidateScript","script","utils","assertHexadecimal","scriptLenRange","dataLen","getHexStringBytes","unwrapDataWrapper","Number","queryLock","dataLenRange","toString","getLiveCell","lastCursor","searchKeyFilter","sizeLimit","result","getCells","generateSearchKey","count","counter","_cell","collect","request","rpcUrl","res","fetch","method","body","JSON","stringify","headers","status","json","error","getLiveCellWithBlockHash","objects","length","requestData","cell","index","id","jsonrpc","params","blockNumber","blockHashList","ckbRpcUrl","item","rpcResponse","find","responseItem","blockHash","visitedCellKey","Set","collectBySingleQuery","key","outPoint","txHash","has","add","withBlockHash","getCellWithCursor","cells","filterByLumosQueryOptions","buffer","skippedCount"],"sources":["../src/collector.ts"],"sourcesContent":["import { utils, Cell, BaseCellCollector } from \"@ckb-lumos/base\";\nimport { validators } from \"@ckb-lumos/toolkit\";\nimport {\n  SearchKeyFilter,\n  CKBIndexerQueryOptions,\n  GetCellsResults,\n  Order,\n  OtherQueryOptions,\n  TerminableCellFetcher,\n} from \"./type\";\nimport { generateSearchKey, getHexStringBytes } from \"./services\";\nimport fetch from \"cross-fetch\";\nimport {\n  filterByLumosQueryOptions,\n  instanceOfScriptWrapper,\n  unwrapDataWrapper,\n} from \"./ckbIndexerFilter\";\n\ninterface GetBlockHashRPCResult {\n  jsonrpc: string;\n  id: number;\n  result: string;\n}\n\n/** CellCollector will not get cell with blockHash by default, please use OtherQueryOptions.withBlockHash and OtherQueryOptions.CKBRpcUrl to get blockHash if you need. */\nexport class CKBCellCollector implements BaseCellCollector {\n  public queries: CKBIndexerQueryOptions[];\n  constructor(\n    public terminableCellFetcher: TerminableCellFetcher,\n    queries: CKBIndexerQueryOptions | CKBIndexerQueryOptions[],\n    public otherQueryOptions?: OtherQueryOptions\n  ) {\n    const defaultQuery: CKBIndexerQueryOptions = {\n      lock: undefined,\n      type: undefined,\n      argsLen: -1,\n      data: \"any\",\n      fromBlock: undefined,\n      toBlock: undefined,\n      order: \"asc\",\n      skip: undefined,\n      outputDataLenRange: undefined,\n      outputCapacityRange: undefined,\n      bufferSize: undefined,\n    };\n    this.queries = (Array.isArray(queries) ? queries : [queries]).map(\n      (query) => ({ ...defaultQuery, ...query })\n    );\n\n    this.queries.forEach((query) => {\n      this.validateQueryOption(query);\n    });\n    this.convertQueryOptionToSearchKey();\n  }\n\n  public validateQueryOption(queries: CKBIndexerQueryOptions): void {\n    if (!queries.lock && (!queries.type || queries.type === \"empty\")) {\n      throw new Error(\"Either lock or type script must be provided!\");\n    }\n\n    if (queries.lock) {\n      if (!instanceOfScriptWrapper(queries.lock)) {\n        validators.ValidateScript(queries.lock);\n      } else if (instanceOfScriptWrapper(queries.lock)) {\n        validators.ValidateScript(queries.lock.script);\n      }\n    }\n\n    if (queries.type && queries.type !== \"empty\") {\n      if (\n        typeof queries.type === \"object\" &&\n        !instanceOfScriptWrapper(queries.type)\n      ) {\n        validators.ValidateScript(queries.type);\n      } else if (\n        typeof queries.type === \"object\" &&\n        instanceOfScriptWrapper(queries.type)\n      ) {\n        validators.ValidateScript(queries.type.script);\n      }\n    }\n\n    if (queries.fromBlock) {\n      utils.assertHexadecimal(\"fromBlock\", queries.fromBlock);\n    }\n    if (queries.toBlock) {\n      utils.assertHexadecimal(\"toBlock\", queries.toBlock);\n    }\n    if (queries.order !== \"asc\" && queries.order !== \"desc\") {\n      throw new Error(\"Order must be either asc or desc!\");\n    }\n    if (queries.outputCapacityRange) {\n      utils.assertHexadecimal(\n        \"outputCapacityRange[0]\",\n        queries.outputCapacityRange[0]\n      );\n      utils.assertHexadecimal(\n        \"outputCapacityRange[1]\",\n        queries.outputCapacityRange[1]\n      );\n    }\n\n    if (queries.outputDataLenRange) {\n      utils.assertHexadecimal(\n        \"outputDataLenRange[0]\",\n        queries.outputDataLenRange[0]\n      );\n      utils.assertHexadecimal(\n        \"outputDataLenRange[1]\",\n        queries.outputDataLenRange[1]\n      );\n    }\n    if (queries.scriptLenRange) {\n      utils.assertHexadecimal(\"scriptLenRange[0]\", queries.scriptLenRange[0]);\n      utils.assertHexadecimal(\"scriptLenRange[1]\", queries.scriptLenRange[1]);\n    }\n\n    if (queries.outputDataLenRange && queries.data && queries.data !== \"any\") {\n      const dataLen = getHexStringBytes(unwrapDataWrapper(queries.data));\n      if (\n        dataLen < Number(queries.outputDataLenRange[0]) ||\n        dataLen >= Number(queries.outputDataLenRange[1])\n      ) {\n        throw new Error(\"data length not match outputDataLenRange\");\n      }\n    }\n\n    if (queries.skip && typeof queries.skip !== \"number\") {\n      throw new Error(\"skip must be a number!\");\n    }\n\n    if (queries.bufferSize && typeof queries.bufferSize !== \"number\") {\n      throw new Error(\"bufferSize must be a number!\");\n    }\n  }\n\n  public convertQueryOptionToSearchKey(): void {\n    this.queries.forEach((query) => {\n      const queryLock = query.lock;\n      // unWrap `ScriptWrapper` into `Script`.\n      if (queryLock) {\n        if (instanceOfScriptWrapper(queryLock)) {\n          validators.ValidateScript(queryLock.script);\n          query.lock = queryLock.script;\n        }\n      }\n\n      // unWrap `ScriptWrapper` into `Script`.\n      if (query.type && query.type !== \"empty\") {\n        if (\n          typeof query.type === \"object\" &&\n          instanceOfScriptWrapper(query.type)\n        ) {\n          validators.ValidateScript(query.type.script);\n          query.type = query.type.script;\n        }\n      }\n\n      if (!query.outputDataLenRange) {\n        if (query.data && query.data !== \"any\") {\n          const dataLenRange = getHexStringBytes(unwrapDataWrapper(query.data));\n          query.outputDataLenRange = [\n            \"0x\" + dataLenRange.toString(16),\n            \"0x\" + (dataLenRange + 1).toString(16),\n          ];\n        }\n      }\n\n      if (!query.scriptLenRange && query.type === \"empty\") {\n        query.scriptLenRange = [\"0x0\", \"0x1\"];\n      }\n    });\n  }\n\n  private async getLiveCell(\n    query: CKBIndexerQueryOptions,\n    lastCursor?: string\n  ): Promise<GetCellsResults> {\n    const searchKeyFilter: SearchKeyFilter = {\n      sizeLimit: query.bufferSize,\n      order: query.order as Order,\n      lastCursor,\n    };\n    const result = await this.terminableCellFetcher.getCells(\n      generateSearchKey(query),\n      undefined,\n      searchKeyFilter\n    );\n    return result;\n  }\n\n  async count(): Promise<number> {\n    let counter = 0;\n\n    for await (const _cell of this.collect()) {\n      counter++;\n    }\n    return counter;\n  }\n\n  // eslint-disable-next-line\n  private async request(rpcUrl: string, data: unknown): Promise<any> {\n    const res: Response = await fetch(rpcUrl, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    if (res.status !== 200) {\n      throw new Error(`indexer request failed with HTTP code ${res.status}`);\n    }\n    const result = await res.json();\n    if (result.error !== undefined) {\n      throw new Error(\n        `indexer request rpc failed with error: ${JSON.stringify(result.error)}`\n      );\n    }\n    return result;\n  }\n\n  private async getLiveCellWithBlockHash(\n    query: CKBIndexerQueryOptions,\n    lastCursor?: string\n  ) {\n    if (!this.otherQueryOptions) {\n      throw new Error(\"CKB Rpc URL must provide\");\n    }\n    const result: GetCellsResults = await this.getLiveCell(query, lastCursor);\n    if (result.objects.length === 0) {\n      return result;\n    }\n    const requestData = result.objects.map((cell, index) => {\n      return {\n        id: index,\n        jsonrpc: \"2.0\",\n        method: \"get_block_hash\",\n        params: [cell.blockNumber],\n      };\n    });\n    const blockHashList: GetBlockHashRPCResult[] = await this.request(\n      this.otherQueryOptions.ckbRpcUrl,\n      requestData\n    );\n    result.objects = result.objects.map((item, index) => {\n      const rpcResponse = blockHashList.find(\n        (responseItem: GetBlockHashRPCResult) => responseItem.id === index\n      );\n      const blockHash = rpcResponse && rpcResponse.result;\n      return { ...item, blockHash };\n    });\n    return result;\n  }\n\n  /**\n   * collect cells without blockHash by default.if you need blockHash, please add OtherQueryOptions.withBlockHash and OtherQueryOptions.ckbRpcUrl when constructor CellCollect.\n   * don't use OtherQueryOption if you don't need blockHash,cause it will slowly your collect.\n   */\n  async *collect(): AsyncGenerator<Cell> {\n    const visitedCellKey = new Set<string>();\n\n    for (const query of this.queries) {\n      for await (const cell of this.collectBySingleQuery(query)) {\n        const key = `${cell.outPoint?.txHash}-${cell.outPoint?.index}`;\n        if (visitedCellKey.has(key)) {\n          continue;\n        } else {\n          visitedCellKey.add(key);\n          yield cell;\n        }\n      }\n    }\n  }\n\n  private async *collectBySingleQuery(\n    query: CKBIndexerQueryOptions\n  ): AsyncGenerator<Cell> {\n    //TODO: fix return type\n    const withBlockHash =\n      this.otherQueryOptions &&\n      \"withBlockHash\" in this.otherQueryOptions &&\n      this.otherQueryOptions.withBlockHash;\n    let lastCursor: undefined | string = undefined;\n    const getCellWithCursor = async (): Promise<Cell[]> => {\n      const result: GetCellsResults = await (withBlockHash\n        ? this.getLiveCellWithBlockHash(query, lastCursor)\n        : this.getLiveCell(query, lastCursor));\n      lastCursor = result.lastCursor;\n      return result.objects;\n    };\n    let cells: Cell[] = await getCellWithCursor();\n    // filter cells by lumos query options\n    cells = filterByLumosQueryOptions(cells, query);\n\n    if (cells.length === 0) {\n      return;\n    }\n\n    let buffer: Promise<Cell[]> = getCellWithCursor();\n    let index = 0;\n    let skippedCount = 0;\n    while (true) {\n      if (query.skip && skippedCount < query.skip) {\n        skippedCount++;\n      } else {\n        yield cells[index];\n      }\n      index++;\n      //reset index and exchange `cells` and `buffer` after yield last cell\n      if (index === cells.length) {\n        index = 0;\n        cells = await buffer;\n        // break if can not get more cells\n        if (cells.length === 0) {\n          break;\n        }\n        buffer = getCellWithCursor();\n      }\n    }\n  }\n}\n"],"mappings":"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"}