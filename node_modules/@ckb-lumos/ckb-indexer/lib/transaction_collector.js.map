{"version":3,"file":"transaction_collector.js","names":["CKBIndexerTransactionCollector","BaseIndexerModule","TransactionCollector","constructor","indexer","queries","CKBRpcUrl","options","defaultOptions","skipMissing","includeStatus","filterOptions","asBaseTransactionCollector","fetchIndexerTransaction","lastCursor","searchKeyFilter","sizeLimit","bufferSize","order","indexerTransactionList","objects","instanceOfScriptWrapper","lock","type","getTransactionByLockAndTypeIndependent","getTransactions","services","generateSearchKey","filterByTypeIoTypeAndLockIoType","getResolvedTransactionRequestPayload","unresolvedTransactionList","requestPayload","forEach","unresolvedTransaction","index","indexerTransaction","ioType","unresolvedOutPoint","transaction","inputs","Number","ioIndex","previousOutput","push","txHash","getResolvedCell","resolvedTransactionList","outputs","resolvedTransaction","find","tx","hash","Error","resolvedCell","filterTransaction","filteredTransactionList","filter","isCellScriptArgsValid","map","txStatus","length","getTransactionListFromRpc","requestBatchTransactionWithStatus","queryWithTypeAdditionOptions","queryWithLockAdditionOptions","lockLastCursor","typeLastCursor","split","queriesWithoutType","undefined","transactionByLock","queriesWithoutLock","transactionByType","intersection","transactionList1","transactionList2","result","tx1","tx2","item","targetTx","hashList","getDetailRequestData","hashItem","transactionList","then","response","isLockArgsLenMatched","args","argsLen","getHexStringBytes","targetCell","lockArgsLen","typeArgsLen","filterByIoType","inputResult","count","getTxWithCursor","counter","txs","buffer","skippedCount","skip","getTransactionHashes","transactionHashes","collect"],"sources":["../src/transaction_collector.ts"],"sourcesContent":["import {\n  TransactionCollectorOptions,\n  indexer as BaseIndexerModule,\n  Output,\n  OutPoint,\n  TransactionWithStatus,\n  TransactionCollector as BaseTransactionCollector,\n  QueryOptions,\n  Transaction,\n} from \"@ckb-lumos/base\";\nimport {\n  SearchKeyFilter,\n  CKBIndexerQueryOptions,\n  IndexerTransaction,\n  IndexerTransactionList,\n  IOType,\n  Order,\n} from \"./type\";\nimport { CkbIndexer } from \"./indexer\";\nimport { instanceOfScriptWrapper } from \"./ckbIndexerFilter\";\nimport * as services from \"./services\";\n\ninterface GetTransactionDetailResult {\n  objects: TransactionWithStatus[];\n  lastCursor: string | undefined;\n}\n\nexport class CKBIndexerTransactionCollector extends BaseIndexerModule.TransactionCollector {\n  filterOptions: TransactionCollectorOptions;\n  constructor(\n    public indexer: CkbIndexer,\n    public queries: CKBIndexerQueryOptions,\n    public CKBRpcUrl: string,\n    public options?: TransactionCollectorOptions\n  ) {\n    super(indexer, queries, options);\n    const defaultOptions: TransactionCollectorOptions = {\n      skipMissing: false,\n      includeStatus: true,\n    };\n    this.filterOptions = { ...defaultOptions, ...this.options };\n  }\n\n  /**\n   * @deprecated\n   * @param CKBRpcUrl\n   */\n  public static asBaseTransactionCollector(\n    CKBRpcUrl: string\n  ): typeof BaseTransactionCollector {\n    return class extends BaseIndexerModule.TransactionCollector {\n      constructor(\n        indexer: CkbIndexer,\n        queries: QueryOptions,\n        options?: TransactionCollectorOptions\n      ) {\n        super(indexer, queries, options);\n        return new CKBIndexerTransactionCollector(\n          indexer,\n          queries,\n          CKBRpcUrl,\n          options\n        );\n      }\n    };\n  }\n  public async fetchIndexerTransaction(\n    queries: CKBIndexerQueryOptions,\n    lastCursor?: string\n  ): Promise<IndexerTransactionList> {\n    const searchKeyFilter: SearchKeyFilter = {\n      sizeLimit: queries.bufferSize,\n      order: queries.order as Order,\n    };\n    if (lastCursor) {\n      searchKeyFilter.lastCursor = lastCursor;\n    }\n    let indexerTransactionList: IndexerTransactionList = {\n      objects: [],\n      lastCursor: \"\",\n    };\n    /*\n     * if both lock and type exist,we need search them in independent and then get intersection\n     * cause ckb-indexer use searchKey script on each cell but native indexer use lock and type on transaction,\n     * and one transaction may have many cells both in input and output, more detail in test 'Test query transaction by both input lock and output type script'\n     */\n\n    //if both lock and type, search search them in independent and then get intersection, GetTransactionsResults.lastCursor change to `${lockLastCursor}-${typeLastCursor}`\n    if (\n      instanceOfScriptWrapper(queries.lock) &&\n      instanceOfScriptWrapper(queries.type)\n    ) {\n      indexerTransactionList =\n        await this.getTransactionByLockAndTypeIndependent(searchKeyFilter);\n      lastCursor = indexerTransactionList.lastCursor;\n    } else {\n      //query by ScriptWrapper.script,block_range,order\n      indexerTransactionList = await this.indexer.getTransactions(\n        services.generateSearchKey(queries),\n        searchKeyFilter\n      );\n      lastCursor = indexerTransactionList.lastCursor;\n    }\n    // filter by ScriptWrapper.io_type\n    indexerTransactionList.objects = this.filterByTypeIoTypeAndLockIoType(\n      indexerTransactionList.objects,\n      queries\n    );\n    return indexerTransactionList;\n  }\n\n  public getResolvedTransactionRequestPayload(\n    unresolvedTransactionList: TransactionWithStatus[],\n    indexerTransactionList: IndexerTransactionList\n  ): string[] {\n    const requestPayload: string[] = [];\n    unresolvedTransactionList.forEach(\n      (unresolvedTransaction: TransactionWithStatus, index: number) => {\n        const indexerTransaction = indexerTransactionList.objects[index];\n        if (indexerTransaction.ioType === \"input\") {\n          const unresolvedOutPoint: OutPoint =\n            unresolvedTransaction.transaction.inputs[\n              Number(indexerTransaction.ioIndex)\n            ].previousOutput;\n          requestPayload.push(unresolvedOutPoint.txHash);\n        }\n      }\n    );\n    return requestPayload;\n  }\n\n  public getResolvedCell(\n    unresolvedTransaction: TransactionWithStatus,\n    resolvedTransactionList: TransactionWithStatus[],\n    indexerTransaction: IndexerTransaction\n  ): Output {\n    if (indexerTransaction.ioType !== \"input\") {\n      return unresolvedTransaction.transaction.outputs[\n        Number(indexerTransaction.ioIndex)\n      ];\n    } else {\n      const unresolvedOutPoint =\n        unresolvedTransaction.transaction.inputs[\n          Number(indexerTransaction.ioIndex)\n        ].previousOutput;\n      const resolvedTransaction = resolvedTransactionList.find((tx) => {\n        return tx.transaction.hash === unresolvedOutPoint.txHash;\n      });\n      if (!resolvedTransaction) {\n        throw new Error(`Impossible: can NOT find resolved transaction!`);\n      }\n      const resolvedCell =\n        resolvedTransaction.transaction.outputs[\n          Number(unresolvedOutPoint.index)\n        ];\n      return resolvedCell;\n    }\n  }\n\n  //filter by ScriptWrapper.argsLen\n  private filterTransaction(\n    unresolvedTransactionList: TransactionWithStatus[],\n    resolvedTransactionList: TransactionWithStatus[],\n    indexerTransactionList: IndexerTransactionList\n  ): TransactionWithStatus[] {\n    const filteredTransactionList = unresolvedTransactionList.filter(\n      (unresolvedTransaction: TransactionWithStatus, index: number) => {\n        const resolvedCell: Output = this.getResolvedCell(\n          unresolvedTransaction,\n          resolvedTransactionList,\n          indexerTransactionList.objects[index]\n        );\n        return this.isCellScriptArgsValid(resolvedCell);\n      }\n    );\n    const objects = filteredTransactionList.map((tx) => ({\n      transaction: tx.transaction,\n      txStatus: tx.txStatus,\n    }));\n    return objects;\n  }\n\n  /*\n   *lock?: ScriptWrapper.script query by ckb-indexer,ScriptWrapper.ioType filter after get transaction from indexer, ScriptWrapper.argsLen filter after get transaction from rpc;\n   *type?:  ScriptWrapper.script query by ckb-indexer,ScriptWrapper.ioType filter after get transaction from indexer, ScriptWrapper.argsLen filter after get transaction from rpc;\n   *data?: will not filter\n   *argsLen?: filter after get transaction detail;\n   *fromBlock?: query by ckb-indexer;\n   *toBlock?: query by ckb-indexer;\n   *skip?: filter after get transaction from ckb-indexer;;\n   *order?: query by ckb-indexer;\n   */\n  public async getTransactions(\n    lastCursor?: string\n  ): Promise<GetTransactionDetailResult> {\n    const indexerTransactionList: IndexerTransactionList =\n      await this.fetchIndexerTransaction(this.queries, lastCursor);\n    lastCursor = indexerTransactionList.lastCursor;\n\n    // return if transaction hash list if empty\n    if (indexerTransactionList.objects.length === 0) {\n      return {\n        objects: [],\n        lastCursor: lastCursor,\n      };\n    }\n    const unresolvedTransactionList: TransactionWithStatus[] =\n      await this.getTransactionListFromRpc(indexerTransactionList);\n    const requestPayload = this.getResolvedTransactionRequestPayload(\n      unresolvedTransactionList,\n      indexerTransactionList\n    );\n    const resolvedTransactionList =\n      await services.requestBatchTransactionWithStatus(\n        this.CKBRpcUrl,\n        requestPayload\n      );\n    const objects = this.filterTransaction(\n      unresolvedTransactionList,\n      resolvedTransactionList,\n      indexerTransactionList\n    );\n    return {\n      objects: objects,\n      lastCursor: lastCursor,\n    };\n  }\n\n  private async getTransactionByLockAndTypeIndependent(\n    searchKeyFilter: SearchKeyFilter\n  ): Promise<IndexerTransactionList> {\n    const queryWithTypeAdditionOptions = { ...searchKeyFilter };\n    const queryWithLockAdditionOptions = { ...searchKeyFilter };\n    if (searchKeyFilter.lastCursor) {\n      const [lockLastCursor, typeLastCursor] =\n        searchKeyFilter.lastCursor.split(\"-\");\n      queryWithLockAdditionOptions.lastCursor = lockLastCursor;\n      queryWithTypeAdditionOptions.lastCursor = typeLastCursor;\n    }\n    const queriesWithoutType = { ...this.queries, type: undefined };\n    const transactionByLock = await this.indexer.getTransactions(\n      services.generateSearchKey(queriesWithoutType),\n      queryWithTypeAdditionOptions\n    );\n    const queriesWithoutLock = { ...this.queries, lock: undefined };\n    const transactionByType = await this.indexer.getTransactions(\n      services.generateSearchKey(queriesWithoutLock),\n      queryWithLockAdditionOptions\n    );\n\n    const intersection = (\n      transactionList1: IndexerTransaction[],\n      transactionList2: IndexerTransaction[]\n    ) => {\n      const result: IndexerTransaction[] = [];\n      transactionList1.forEach((tx1) => {\n        const tx2 = transactionList2.find((item) => item.txHash === tx1.txHash);\n        if (tx2) {\n          // put the output io_type to intersection result, cause output have cells\n          const targetTx = tx1.ioType === \"output\" ? tx1 : tx2;\n          // change io_type to both cause targetTx exist both input and output\n          result.push({ ...targetTx, ioType: \"both\" });\n        }\n      });\n      return result;\n    };\n    const hashList = intersection(\n      transactionByType.objects,\n      transactionByLock.objects\n    );\n    const lastCursor =\n      transactionByLock.lastCursor + \"-\" + transactionByType.lastCursor;\n    const objects = hashList;\n    return { objects, lastCursor };\n  }\n\n  private getTransactionListFromRpc = async (\n    indexerTransactionList: IndexerTransactionList\n  ) => {\n    const getDetailRequestData = indexerTransactionList.objects.map(\n      (hashItem: IndexerTransaction) => {\n        return hashItem.txHash;\n      }\n    );\n\n    const transactionList: TransactionWithStatus[] = await services\n      .requestBatchTransactionWithStatus(this.CKBRpcUrl, getDetailRequestData)\n      .then((response) => {\n        return response.map((item, index) => {\n          if (!this.filterOptions.skipMissing && !item.transaction) {\n            throw new Error(\n              `Transaction ${indexerTransactionList.objects[index].txHash} is missing!`\n            );\n          }\n          return item;\n        });\n      });\n    return transactionList;\n  };\n\n  private isLockArgsLenMatched = (\n    args: string | undefined,\n    argsLen?: number | \"any\"\n  ) => {\n    if (!argsLen) return true;\n    if (argsLen === \"any\") return true;\n    if (argsLen === -1) return true;\n    return services.getHexStringBytes(args as string) === argsLen;\n  };\n\n  // only valid after pass flow three validate\n  private isCellScriptArgsValid = (targetCell: Output) => {\n    if (this.queries.lock) {\n      const lockArgsLen = instanceOfScriptWrapper(this.queries.lock)\n        ? this.queries.lock.argsLen\n        : this.queries.argsLen;\n      if (!this.isLockArgsLenMatched(targetCell.lock.args, lockArgsLen)) {\n        return false;\n      }\n    }\n\n    if (this.queries.type && this.queries.type !== \"empty\") {\n      const typeArgsLen = instanceOfScriptWrapper(this.queries.type)\n        ? this.queries.type.argsLen\n        : this.queries.argsLen;\n      if (!this.isLockArgsLenMatched(targetCell.type?.args, typeArgsLen)) {\n        return false;\n      }\n    }\n\n    if (this.queries.type && this.queries.type === \"empty\") {\n      if (targetCell.type) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  private filterByIoType = (\n    inputResult: IndexerTransaction[],\n    ioType: IOType\n  ) => {\n    if (ioType === \"both\") {\n      return inputResult;\n    }\n    if (ioType === \"input\" || ioType === \"output\") {\n      return inputResult.filter(\n        (item: IndexerTransaction) =>\n          item.ioType === ioType || item.ioType === \"both\"\n      );\n    }\n    return inputResult;\n  };\n\n  private filterByTypeIoTypeAndLockIoType = (\n    inputResult: IndexerTransaction[],\n    queries: CKBIndexerQueryOptions\n  ) => {\n    let result = inputResult;\n    if (instanceOfScriptWrapper(queries.lock) && queries.lock.ioType) {\n      result = this.filterByIoType(result, queries.lock.ioType);\n    }\n    if (instanceOfScriptWrapper(queries.type) && queries.type.ioType) {\n      result = this.filterByIoType(result, queries.type.ioType);\n    }\n    return result;\n  };\n\n  async count(): Promise<number> {\n    let lastCursor: undefined | string = undefined;\n    const getTxWithCursor = async (): Promise<TransactionWithStatus[]> => {\n      const result: GetTransactionDetailResult = await this.getTransactions(\n        lastCursor\n      );\n      lastCursor = result.lastCursor;\n      return result.objects;\n    };\n    let counter = 0;\n    let txs: TransactionWithStatus[] = await getTxWithCursor();\n    if (txs.length === 0) {\n      return 0;\n    }\n    let buffer: Promise<TransactionWithStatus[]> = getTxWithCursor();\n    let index = 0;\n    let skippedCount = 0;\n    while (true) {\n      if (this.queries.skip && skippedCount < this.queries.skip) {\n        skippedCount++;\n      } else {\n        counter += 1;\n      }\n      index++;\n      //reset index and exchange `txs` and `buffer` after count last tx\n      if (index === txs.length) {\n        index = 0;\n        txs = await buffer;\n        // break if can not get more txs\n        if (txs.length === 0) {\n          break;\n        }\n        buffer = getTxWithCursor();\n      }\n    }\n    return counter;\n  }\n  async getTransactionHashes(): Promise<string[]> {\n    let lastCursor: undefined | string = undefined;\n    const getTxWithCursor = async (): Promise<TransactionWithStatus[]> => {\n      const result: GetTransactionDetailResult = await this.getTransactions(\n        lastCursor\n      );\n      lastCursor = result.lastCursor;\n      return result.objects;\n    };\n\n    const transactionHashes: string[] = [];\n    //skip query result in first query\n    let txs: TransactionWithStatus[] = await getTxWithCursor();\n    if (txs.length === 0) {\n      return [];\n    }\n    let buffer: Promise<TransactionWithStatus[]> = getTxWithCursor();\n    let index = 0;\n    let skippedCount = 0;\n    while (true) {\n      if (this.queries.skip && skippedCount < this.queries.skip) {\n        skippedCount++;\n      } else {\n        if (txs[index].transaction.hash) {\n          transactionHashes.push(txs[index].transaction.hash as string);\n        }\n      }\n\n      index++;\n      //reset index and exchange `txs` and `buffer` after count last tx\n      if (index === txs.length) {\n        index = 0;\n        txs = await buffer;\n        // break if can not get more txs\n        if (txs.length === 0) {\n          break;\n        }\n        buffer = getTxWithCursor();\n      }\n    }\n    return transactionHashes;\n  }\n  async *collect(): AsyncGenerator<\n    TransactionWithStatus | Transaction,\n    undefined,\n    unknown\n  > {\n    let lastCursor: undefined | string = undefined;\n    const getTxWithCursor = async (): Promise<TransactionWithStatus[]> => {\n      const result: GetTransactionDetailResult = await this.getTransactions(\n        lastCursor\n      );\n      lastCursor = result.lastCursor;\n      return result.objects;\n    };\n    //skip query result in first query\n    let txs: TransactionWithStatus[] = await getTxWithCursor();\n    if (txs.length === 0) {\n      return undefined;\n    }\n    let buffer: Promise<TransactionWithStatus[]> = getTxWithCursor();\n    let index = 0;\n    let skippedCount = 0;\n    while (true) {\n      if (this.queries.skip && skippedCount < this.queries.skip) {\n        skippedCount++;\n      } else {\n        if (this.filterOptions.includeStatus) {\n          yield txs[index];\n        } else {\n          yield txs[index].transaction;\n        }\n      }\n      index++;\n      //reset index and exchange `txs` and `buffer` after count last tx\n      if (index === txs.length) {\n        index = 0;\n        txs = await buffer;\n        // break if can not get more txs\n        if (txs.length === 0) {\n          break;\n        }\n        buffer = getTxWithCursor();\n      }\n    }\n  }\n}\n"],"mappings":"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"}