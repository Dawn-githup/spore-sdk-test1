{"version":3,"file":"indexer.js","names":["DefaultTerminator","stop","push","defaultLogger","level","message","console","log","CkbIndexer","version","medianTimeEmitters","emitters","isSubscribeRunning","constructor","ckbIndexerUrl","ckbRpcUrl","uri","ckbIndexerUri","getCkbRpc","CKBRPC","getIndexerRpc","rpc","getTip","getIndexerTip","CKBIndexerRpc","tip","asyncSleep","timeout","Promise","resolve","setTimeout","waitForSync","blockDifference","rpcTipNumber","parseInt","getTipHeader","number","indexerTipNumber","blockNumber","collector","queries","otherQueryOptions","CKBCellCollector","getCells","searchKey","terminator","searchKeyFilter","TerminableCellAdapter","getTransactions","infos","cursor","lastCursor","sizeLimit","order","res","toString","txs","objects","concat","length","running","start","startForever","subscribe","scheduleLoop","lock","type","Error","toBlock","skip","emitter","IndexerEmitter","argsLen","outputData","data","unwrapDataWrapper","fromBlock","utils","assertHexadecimal","BI","from","validators","ValidateScript","loop","poll","then","catch","e","stack","blockHash","block","getBlockByNumber","publishAppendBlockEvents","nextBlockNumber","add","header","parentHash","txIndex","tx","transactions","entries","inputTxHashes","inputs","map","input","previousOutput","txHash","transactionResponse","requestBatchTransactionWithStatus","response","txWithStatus","index","cellIndex","outputCell","transaction","outputs","outputsData","output","forEach","filterEvents","outputIndex","emitMedianTimeEvents","undefined","checkFilterOptions","emit","emitterScript","script","checkBlockNumber","lte","checkOutputData","checkScript","codeHash","hashType","checkArgs","args","emitterArgs","substring","info","getBlockchainInfo","medianTime","medianTimeEmitter","subscribeMedianTime","EventEmitter","getCellsableRpc","liveCells","liveCell","cell","cellOutput","outPoint"],"sources":["../src/indexer.ts"],"sourcesContent":["import {\n  Cell,\n  CellCollector,\n  CellProvider,\n  HexString,\n  Script,\n  Output,\n  utils,\n  Block,\n} from \"@ckb-lumos/base\";\nimport { requestBatchTransactionWithStatus } from \"./services\";\nimport { CKBCellCollector } from \"./collector\";\nimport { EventEmitter } from \"events\";\nimport {\n  CKBIndexerQueryOptions,\n  GetCellsResults,\n  GetLiveCellsResult,\n  IndexerTransaction,\n  IndexerTransactionList,\n  IndexerEmitter,\n  OutputToVerify,\n  SearchKey,\n  IndexerRpc,\n  GetTransactionsSearchKey,\n  SearchKeyFilter,\n  Terminator,\n  OtherQueryOptions,\n  TerminableCellFetcher,\n  GetCellsRpc,\n} from \"./type\";\nimport { BI } from \"@ckb-lumos/bi\";\nimport { RPC as CKBIndexerRpc } from \"./rpc\";\nimport { CKBRPC } from \"@ckb-lumos/rpc\";\nimport { validators } from \"@ckb-lumos/toolkit\";\nimport type * as IndexerType from \"./indexerType\";\nimport { unwrapDataWrapper } from \"./ckbIndexerFilter\";\n\nconst DefaultTerminator: Terminator = () => {\n  return { stop: false, push: true };\n};\n\nfunction defaultLogger(level: string, message: string) {\n  console.log(`[${level}] ${message}`);\n}\n\n/** CkbIndexer.collector will not get cell with blockHash by default, please use OtherQueryOptions.withBlockHash and OtherQueryOptions.CKBRpcUrl to get blockHash if you need. */\nexport class CkbIndexer implements CellProvider, TerminableCellFetcher {\n  static version = \"0.4.1\";\n  uri: string;\n  ckbIndexerUri: string;\n  medianTimeEmitters: EventEmitter[] = [];\n  emitters: IndexerEmitter[] = [];\n  isSubscribeRunning = false;\n\n  constructor(ckbRpcUrl: string);\n  constructor(ckbIndexerUrl: string, ckbRpcUrl: string);\n  constructor(public ckbIndexerUrl: string, public ckbRpcUrl?: string) {\n    this.uri = ckbRpcUrl || ckbIndexerUrl;\n    this.ckbIndexerUri = ckbIndexerUrl;\n  }\n\n  private getCkbRpc(): CKBRPC {\n    return new CKBRPC(this.uri);\n  }\n\n  /* c8 ignore next 12 */\n  private getIndexerRpc(): IndexerRpc {\n    if (this.uri === this.ckbIndexerUri) {\n      const rpc = this.getCkbRpc();\n      return {\n        ...rpc,\n        getTip: rpc.getIndexerTip,\n      };\n    }\n\n    return new CKBIndexerRpc(this.ckbIndexerUri);\n  }\n\n  public async tip(): Promise<IndexerType.Tip> {\n    return await this.getIndexerRpc().getTip();\n  }\n\n  asyncSleep(timeout: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, timeout));\n  }\n\n  async waitForSync(blockDifference = 0): Promise<void> {\n    const rpcTipNumber = parseInt(\n      (await this.getCkbRpc().getTipHeader()).number,\n      16\n    );\n    while (true) {\n      const indexerTipNumber = parseInt((await this.tip()).blockNumber, 16);\n      if (indexerTipNumber + blockDifference >= rpcTipNumber) {\n        return;\n      }\n      await this.asyncSleep(1000);\n    }\n  }\n\n  /** collector cells without blockHash by default.if you need blockHash, please add OtherQueryOptions.withBlockHash and OtherQueryOptions.ckbRpcUrl.\n   * don't use OtherQueryOption if you don't need blockHash,cause it will slowly your collect.\n   */\n  collector(\n    queries: CKBIndexerQueryOptions,\n    otherQueryOptions?: OtherQueryOptions\n  ): CellCollector {\n    return new CKBCellCollector(this, queries, otherQueryOptions);\n  }\n\n  public async getCells(\n    searchKey: SearchKey,\n    terminator: Terminator = DefaultTerminator,\n    searchKeyFilter: SearchKeyFilter = {}\n  ): Promise<GetCellsResults> {\n    return new TerminableCellAdapter(this.getIndexerRpc()).getCells(\n      searchKey,\n      terminator,\n      searchKeyFilter\n    );\n  }\n\n  public async getTransactions<Group extends boolean = false>(\n    searchKey: GetTransactionsSearchKey<Group>,\n    searchKeyFilter: SearchKeyFilter = {}\n  ): Promise<IndexerTransactionList<Group>> {\n    let infos: IndexerTransaction<Group>[] = [];\n    let cursor: string | undefined = searchKeyFilter.lastCursor;\n    const sizeLimit = searchKeyFilter.sizeLimit || 100;\n    const order = searchKeyFilter.order || \"asc\";\n    while (true) {\n      const res = await this.getIndexerRpc().getTransactions<Group>(\n        searchKey,\n        order,\n        `0x${sizeLimit.toString(16)}`,\n        cursor\n      );\n      const txs = res.objects;\n      cursor = res.lastCursor;\n      infos = infos.concat(txs);\n      if (txs.length <= sizeLimit) {\n        break;\n      }\n    }\n    return {\n      objects: infos,\n      lastCursor: cursor,\n    };\n  }\n\n  running(): boolean {\n    return true;\n  }\n\n  start(): void {\n    defaultLogger(\n      \"warn\",\n      \"deprecated: no need to start the ckb-indexer manually\"\n    );\n  }\n\n  startForever(): void {\n    defaultLogger(\n      \"warn\",\n      \"deprecated: no need to startForever the ckb-indexer manually\"\n    );\n  }\n\n  stop(): void {\n    defaultLogger(\n      \"warn\",\n      \"deprecated: no need to stop the ckb-indexer manually\"\n    );\n  }\n\n  subscribe(queries: CKBIndexerQueryOptions): EventEmitter {\n    this.isSubscribeRunning = true;\n    this.scheduleLoop();\n    if (queries.lock && queries.type) {\n      throw new Error(\n        \"The notification machanism only supports you subscribing for one script once so far!\"\n      );\n    }\n    if (queries.toBlock !== null || queries.skip !== null) {\n      defaultLogger(\n        \"warn\",\n        \"The passing fields such as toBlock and skip are ignored in subscribe() method.\"\n      );\n    }\n    const emitter = new IndexerEmitter();\n    emitter.argsLen = queries.argsLen;\n    emitter.outputData = queries.data && unwrapDataWrapper(queries.data);\n    if (queries.fromBlock) {\n      utils.assertHexadecimal(\"fromBlock\", queries.fromBlock);\n    }\n    emitter.fromBlock = !queries.fromBlock\n      ? BI.from(0)\n      : BI.from(queries.fromBlock);\n    if (queries.lock) {\n      validators.ValidateScript(queries.lock);\n      emitter.lock = queries.lock as Script;\n    } else if (queries.type && queries.type !== \"empty\") {\n      validators.ValidateScript(queries.type);\n      emitter.type = queries.type as Script;\n    } else {\n      throw new Error(\"Either lock or type script must be provided!\");\n    }\n    this.emitters.push(emitter);\n    return emitter;\n  }\n\n  private loop() {\n    if (!this.isSubscribeRunning) {\n      return;\n    }\n    this.poll()\n      .then((timeout) => {\n        this.scheduleLoop(timeout);\n      })\n      .catch((e) => {\n        defaultLogger(\n          \"error\",\n          `Error occurs: ${e} ${e.stack}, stopping indexer!`\n        );\n        this.isSubscribeRunning = false;\n      });\n  }\n\n  private scheduleLoop(timeout = 1): void {\n    setTimeout(() => {\n      this.loop();\n    }, timeout);\n  }\n\n  private async poll() {\n    let timeout = 1;\n    const tip = await this.tip();\n    const { blockNumber, blockHash } = tip;\n    if (blockNumber === \"0x0\") {\n      const block: Block = (await this.getCkbRpc().getBlockByNumber(\n        blockNumber\n      )) as Block;\n      await this.publishAppendBlockEvents(block);\n    }\n    const nextBlockNumber = BI.from(blockNumber).add(1);\n    const block: Block = (await this.getCkbRpc().getBlockByNumber(\n      `0x${nextBlockNumber.toString(16)}`\n    )) as Block;\n    if (block) {\n      if (block.header.parentHash === blockHash) {\n        await this.publishAppendBlockEvents(block);\n      } else {\n        const block: Block = (await this.getCkbRpc().getBlockByNumber(\n          blockNumber\n        )) as Block;\n        await this.publishAppendBlockEvents(block);\n      }\n    } else {\n      const block: Block = (await this.getCkbRpc().getBlockByNumber(\n        blockNumber\n      )) as Block;\n      await this.publishAppendBlockEvents(block);\n      timeout = 3 * 1000;\n    }\n    return timeout;\n  }\n\n  private async publishAppendBlockEvents(block: Block) {\n    for (const [txIndex, tx] of block.transactions.entries()) {\n      const blockNumber = block.header.number;\n      // publish changed events if subscribed script exists in previous output cells , skip the cellbase.\n      if (txIndex > 0) {\n        const inputTxHashes = tx.inputs.map(\n          (input) => input.previousOutput.txHash\n        );\n\n        // batch request by block\n        const transactionResponse: OutputToVerify[] =\n          await requestBatchTransactionWithStatus(this.uri, inputTxHashes).then(\n            (response) => {\n              return response.map((txWithStatus, index) => {\n                const cellIndex = tx.inputs[index].previousOutput.index;\n                const outputCell =\n                  txWithStatus.transaction.outputs[parseInt(cellIndex)];\n                const outputData =\n                  txWithStatus.transaction.outputsData[parseInt(cellIndex)];\n                return { output: outputCell, outputData };\n              });\n            }\n          );\n        transactionResponse.forEach(({ output, outputData }) => {\n          this.filterEvents(output, blockNumber, outputData);\n        });\n      }\n      // publish changed events if subscribed script exists in output cells.\n      for (const [outputIndex, output] of tx.outputs.entries()) {\n        const outputData = tx.outputsData[outputIndex];\n        this.filterEvents(output, blockNumber, outputData);\n      }\n    }\n    await this.emitMedianTimeEvents();\n  }\n\n  private filterEvents(\n    output: Output,\n    blockNumber: string,\n    outputData: HexString\n  ) {\n    for (const emitter of this.emitters) {\n      if (\n        emitter.lock !== undefined &&\n        this.checkFilterOptions(\n          emitter,\n          blockNumber,\n          outputData,\n          emitter.lock,\n          output.lock\n        )\n      ) {\n        emitter.emit(\"changed\");\n      }\n    }\n    if (output.type !== null) {\n      for (const emitter of this.emitters) {\n        if (\n          emitter.type !== undefined &&\n          this.checkFilterOptions(\n            emitter,\n            blockNumber,\n            outputData,\n            emitter.type,\n            output.type\n          )\n        ) {\n          emitter.emit(\"changed\");\n        }\n      }\n    }\n  }\n\n  private checkFilterOptions(\n    emitter: IndexerEmitter,\n    blockNumber: string,\n    outputData: string,\n    emitterScript: Script,\n    script: Script | undefined\n  ) {\n    const checkBlockNumber = emitter.fromBlock\n      ? BI.from(emitter.fromBlock).lte(blockNumber)\n      : true;\n    const checkOutputData =\n      emitter.outputData === \"any\" || !emitter.outputData\n        ? true\n        : emitter.outputData === outputData;\n    const checkScript = !script\n      ? true\n      : emitterScript.codeHash === script.codeHash &&\n        emitterScript.hashType === script.hashType &&\n        this.checkArgs(emitter.argsLen, emitterScript.args, script.args);\n    return checkBlockNumber && checkOutputData && checkScript;\n  }\n\n  private checkArgs(\n    argsLen: number | \"any\" | undefined,\n    emitterArgs: HexString,\n    args: HexString\n  ) {\n    if (argsLen === -1 || (!argsLen && argsLen !== 0)) {\n      return emitterArgs === args;\n    } else if (typeof argsLen === \"number\" && args.length === argsLen * 2 + 2) {\n      return args.substring(0, emitterArgs.length) === emitterArgs;\n    } else if (argsLen === \"any\") {\n      return args.substring(0, emitterArgs.length) === emitterArgs;\n    } else {\n      return false;\n    }\n  }\n\n  private async emitMedianTimeEvents() {\n    if (this.medianTimeEmitters.length === 0) {\n      return;\n    }\n    const info = await this.getCkbRpc().getBlockchainInfo();\n    const medianTime = info.medianTime;\n    for (const medianTimeEmitter of this.medianTimeEmitters) {\n      medianTimeEmitter.emit(\"changed\", medianTime);\n    }\n  }\n\n  subscribeMedianTime(): EventEmitter {\n    this.isSubscribeRunning = true;\n    this.scheduleLoop();\n    const medianTimeEmitter = new EventEmitter();\n    this.medianTimeEmitters.push(medianTimeEmitter);\n    return medianTimeEmitter;\n  }\n}\n\nexport class TerminableCellAdapter implements TerminableCellFetcher {\n  constructor(private getCellsableRpc: { getCells: GetCellsRpc }) {}\n\n  async getCells(\n    searchKey: SearchKey,\n    terminator: Terminator = DefaultTerminator,\n    searchKeyFilter: SearchKeyFilter = {}\n  ): Promise<GetCellsResults> {\n    const infos: Cell[] = [];\n    let cursor: string | undefined = searchKeyFilter.lastCursor;\n    const sizeLimit = searchKeyFilter.sizeLimit || 100;\n    const order = searchKeyFilter.order || \"asc\";\n    const index = 0;\n    while (true) {\n      const res: GetLiveCellsResult = await this.getCellsableRpc.getCells(\n        searchKey,\n        order,\n        `0x${sizeLimit.toString(16)}`,\n        cursor\n      );\n      const liveCells = res.objects;\n      cursor = res.lastCursor;\n      for (const liveCell of liveCells) {\n        const cell: Cell = {\n          cellOutput: liveCell.output,\n          data: liveCell.outputData,\n          outPoint: liveCell.outPoint ? liveCell.outPoint : undefined,\n          blockNumber: liveCell.blockNumber,\n        };\n        const { stop, push } = terminator(index, cell);\n        if (push) {\n          infos.push(cell);\n        }\n        if (stop) {\n          return {\n            objects: infos,\n            lastCursor: cursor,\n          };\n        }\n      }\n      if (liveCells.length <= sizeLimit) {\n        break;\n      }\n    }\n    return {\n      objects: infos,\n      lastCursor: cursor,\n    };\n  }\n}\n"],"mappings":"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"}