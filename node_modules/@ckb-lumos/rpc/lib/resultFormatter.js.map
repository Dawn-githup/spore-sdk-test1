{"version":3,"file":"resultFormatter.js","names":["isTxPoolIds","rawTxPool","Array","isArray","pending","toArray","format","arg","map","toNullable","origin","toNumber","number","toString","toHash","hash","toHeader","header","compact_target","compactTarget","transactions_root","transactionsRoot","proposals_hash","proposalsHash","extra_hash","extraHash","parent_hash","parentHash","rest","toScript","script","code_hash","codeHash","hash_type","hashType","toInput","input","previous_output","previousOutput","toOutPoint","toOutput","output","lock","type","outPoint","tx_hash","txHash","toDepType","toCellDep","cellDep","out_point","dep_type","depType","toTransaction","tx","cell_deps","cellDeps","inputs","outputs","outputs_data","outputsData","header_deps","headerDeps","toUncleBlock","uncleBlock","toTip","tip","blockHash","block_hash","blockNumber","block_number","toBlock","block","uncles","transactions","toAlertMessage","alertMessage","notice_until","noticeUntil","toBlockchainInfo","info","is_initial_block_download","isInitialBlockDownload","median_time","medianTime","alerts","toLocalNodeInfo","node_id","nodeId","protocols","id","name","support_versions","supportVersions","toRemoteNodeInfo","connected_duration","connectedDuration","is_outbound","isOutbound","last_ping_duration","lastPingDuration","sync_state","syncState","bestKnownHeaderHash","best_known_header_hash","bestKnownHeaderNumber","best_known_header_number","canFetchCount","can_fetch_count","inflightCount","inflight_count","lastCommonHeaderHash","last_common_header_hash","lastCommonHeaderNumber","last_common_header_number","unknownHeaderListSize","unknown_header_list_size","toTxPoolInfo","last_txs_updated_at","lastTxsUpdatedAt","tip_hash","tipHash","tip_number","tipNumber","total_tx_cycles","totalTxCycles","total_tx_size","totalTxSize","min_fee_rate","minFeeRate","toPeers","nodes","toCell","cell","undefined","toLiveCell","liveCell","data","toLiveCellWithStatus","cellWithStatus","toCells","cells","toCellIncludingOutPoint","output_data_len","outputDataLen","toCellsIncludingOutPoint","toTransactionWithStatus","txWithStatus","transaction","tx_status","status","txStatus","toEpoch","epoch","start_number","startNumber","toTransactionPoint","transactionPoint","toTransactionsByLockHash","consumedBy","consumed_by","createdBy","created_by","toLiveCellsByLockHash","cellOutput","cell_output","cellbase","toLockHashIndexState","index","lock_hash","lockHash","toLockHashIndexStates","states","toBannedAddress","bannedAddress","ban_reason","banReason","ban_until","banUntil","created_at","createdAt","toBannedAddresses","bannedAddresses","banAddr","toCellbaseOutputCapacityDetails","details","proposal_reward","proposalReward","tx_fee","txFee","toFeeRate","feeRateObj","fee_rate","feeRate","toCapacityByLockHash","capacityByLockHash","cells_count","cellsCount","capacity","toBlockEconomicState","blockEconomicState","finalized_at","finalizedAt","miner_reward","minerReward","txs_fee","txsFee","toSyncState","state","bestKnownBlockNumber","best_known_block_number","bestKnownBlockTimestamp","best_known_block_timestamp","fastTime","fast_time","ibd","inflightBlocksCount","inflight_blocks_count","lowTime","low_time","normalTime","normal_time","orphanBlocksCount","orphan_blocks_count","toTransactionProof","proof","witnesses_root","witnessesRoot","toConsensus","consensus","blockVersion","block_version","cellbaseMaturity","cellbase_maturity","daoTypeHash","dao_type_hash","epochDurationTarget","epoch_duration_target","genesisHash","genesis_hash","initialPrimaryEpochReward","initial_primary_epoch_reward","maxBlockBytes","max_block_bytes","maxBlockCycles","max_block_cycles","maxBlockProposalsLimit","max_block_proposals_limit","maxUnclesNum","max_uncles_num","medianTimeBlockCount","median_time_block_count","orphanRateTarget","orphan_rate_target","permanentDifficultyInDummy","permanent_difficulty_in_dummy","primaryEpochRewardHalvingInterval","primary_epoch_reward_halving_interval","proposerRewardRatio","proposer_reward_ratio","secondaryEpochReward","secondary_epoch_reward","secp256k1Blake160MultisigAllTypeHash","secp256k1_blake160_multisig_all_type_hash","secp256k1Blake160SighashAllTypeHash","secp256k1_blake160_sighash_all_type_hash","txProposalWindow","tx_proposal_window","txVersion","tx_version","typeIdCodeHash","type_id_code_hash","hardforkFeatures","hardfork_features","epoch_number","epochNumber","toRawTxPool","toTxVerbosity","ancestors_count","ancestorsCount","ancestors_cycles","ancestorsCycles","ancestors_size","ancestorsSize","proposed","Object","keys","forEach","toIndexerCell","indexerCell","outputData","output_data","txIndex","tx_index","toGetCellsResult","getCellsResult","lastCursor","last_cursor","objects","object","isUngroupedIndexerTransaction","value","toIndexerTransaction","indexerTransaction","ioIndex","io_index","ioType","io_type","toGetTransactionsResult","getTransactionsResult","toCellsCapacity","cellsCapacity","toBlockFilter","blockFilter","toTransactionAndWitnessProof","transactionsProof","transactions_proof","witnessesProof","witnesses_proof","toFeeRateStatistics","statistics","mean","median","toForkBlockResult","result","proposals","toEstimateCycles","cycle","cycles"],"sources":["../src/resultFormatter.ts"],"sourcesContent":["/* eslint-disable camelcase, @typescript-eslint/no-explicit-any */\nimport { CKBComponents } from \"./types/api\";\nimport { RPC } from \"./types/rpc\";\n\nconst isTxPoolIds = (rawTxPool: RPC.RawTxPool): rawTxPool is RPC.TxPoolIds => {\n  return Array.isArray(rawTxPool.pending);\n};\nconst toArray =\n  <I, O>(format?: (args: I) => O) =>\n  (arg: I[]): O[] | I[] => {\n    if (typeof format !== \"function\" || !Array.isArray(arg)) {\n      return arg;\n    }\n    return arg.map(format);\n  };\n\nconst toNullable =\n  <I, O>(format?: (args: I) => O) =>\n  (origin: I | null): I | O | null => {\n    if (!format || origin === null) return origin as never;\n    return format(origin);\n  };\n\nconst toNumber = (number: RPC.BlockNumber): CKBComponents.BlockNumber =>\n  number.toString();\nconst toHash = (hash: RPC.Hash256): CKBComponents.Hash256 => hash;\nconst toHeader = (header: RPC.Header): CKBComponents.BlockHeader => {\n  if (!header) return header;\n  const {\n    compact_target: compactTarget,\n    transactions_root: transactionsRoot,\n    proposals_hash: proposalsHash,\n    extra_hash: extraHash,\n    parent_hash: parentHash,\n    ...rest\n  } = header;\n  return {\n    compactTarget,\n    parentHash,\n    transactionsRoot,\n    proposalsHash,\n    extraHash,\n    ...rest,\n  };\n};\nconst toScript = (script: RPC.Script): CKBComponents.Script => {\n  if (!script) return script;\n  const { code_hash: codeHash, hash_type: hashType, ...rest } = script;\n  return {\n    codeHash,\n    hashType,\n    ...rest,\n  };\n};\nconst toInput = (input: RPC.CellInput): CKBComponents.CellInput => {\n  if (!input) return input;\n  const { previous_output: previousOutput, ...rest } = input;\n  return {\n    previousOutput: previousOutput\n      ? toOutPoint(previousOutput)\n      : previousOutput,\n    ...rest,\n  };\n};\nconst toOutput = (output: RPC.CellOutput): CKBComponents.CellOutput => {\n  if (!output) return output;\n  const { lock, type, ...rest } = output;\n  return {\n    lock: toScript(lock),\n    type: type ? toScript(type) : type,\n    ...rest,\n  };\n};\nconst toOutPoint = (outPoint: RPC.OutPoint): CKBComponents.OutPoint => {\n  const { tx_hash: txHash, ...rest } = outPoint;\n  return {\n    txHash,\n    ...rest,\n  };\n};\nconst toDepType = (type: RPC.DepType): CKBComponents.DepType => {\n  if (type === \"dep_group\") {\n    return \"depGroup\";\n  }\n  return type;\n};\n\nconst toCellDep = (cellDep: RPC.CellDep): CKBComponents.CellDep => {\n  if (!cellDep) return cellDep;\n  const { out_point: outPoint, dep_type = \"code\", ...rest } = cellDep;\n  return {\n    outPoint: toOutPoint(outPoint),\n    depType: toDepType(dep_type),\n    ...rest,\n  };\n};\nfunction toTransaction(tx: RPC.RawTransaction): CKBComponents.RawTransaction;\nfunction toTransaction(tx: RPC.Transaction): CKBComponents.Transaction;\nfunction toTransaction(\n  tx: RPC.RawTransaction | RPC.Transaction\n): CKBComponents.Transaction | CKBComponents.RawTransaction {\n  if (!tx) return tx;\n  const {\n    cell_deps: cellDeps = [],\n    inputs = [],\n    outputs = [],\n    outputs_data: outputsData = [],\n    header_deps: headerDeps = [],\n    ...rest\n  } = tx;\n  return {\n    cellDeps: cellDeps.map(toCellDep),\n    inputs: inputs.map(toInput),\n    outputs: outputs.map(toOutput),\n    outputsData,\n    headerDeps,\n    ...rest,\n  };\n}\nconst toUncleBlock = (uncleBlock: RPC.UncleBlock): CKBComponents.UncleBlock => {\n  if (!uncleBlock) return uncleBlock;\n  const { header, ...rest } = uncleBlock;\n  return {\n    header: toHeader(header),\n    ...rest,\n  };\n};\n\nconst toTip = (tip: RPC.Tip): CKBComponents.Tip => ({\n  blockHash: tip.block_hash,\n  blockNumber: tip.block_number,\n});\n\nconst toBlock = (block: RPC.Block): CKBComponents.Block => {\n  if (!block) return block;\n  const { header, uncles = [], transactions = [], ...rest } = block;\n  return {\n    header: toHeader(header),\n    uncles: uncles.map(toUncleBlock),\n    transactions: transactions.map(toTransaction),\n    ...rest,\n  };\n};\nconst toAlertMessage = (\n  alertMessage: RPC.AlertMessage\n): CKBComponents.AlertMessage => {\n  if (!alertMessage) return alertMessage;\n  const { notice_until: noticeUntil, ...rest } = alertMessage;\n  return {\n    noticeUntil,\n    ...rest,\n  };\n};\nconst toBlockchainInfo = (\n  info: RPC.BlockchainInfo\n): CKBComponents.BlockchainInfo => {\n  if (!info) return info;\n  const {\n    is_initial_block_download: isInitialBlockDownload,\n    median_time: medianTime,\n    alerts,\n    ...rest\n  } = info;\n  return {\n    isInitialBlockDownload,\n    medianTime,\n    alerts: alerts.map(toAlertMessage),\n    ...rest,\n  };\n};\nconst toLocalNodeInfo = (\n  info: RPC.LocalNodeInfo\n): CKBComponents.LocalNodeInfo => {\n  if (!info) return info;\n  const { node_id: nodeId, protocols, ...rest } = info;\n  return {\n    nodeId,\n    protocols: protocols.map(\n      ({ id, name, support_versions: supportVersions }) => ({\n        id,\n        name,\n        supportVersions,\n      })\n    ),\n    ...rest,\n  };\n};\nconst toRemoteNodeInfo = (\n  info: RPC.RemoteNodeInfo\n): CKBComponents.RemoteNodeInfo => {\n  if (!info) return info;\n  const {\n    node_id: nodeId,\n    connected_duration: connectedDuration,\n    is_outbound: isOutbound,\n    last_ping_duration: lastPingDuration,\n    sync_state,\n    ...rest\n  } = info;\n  return {\n    nodeId,\n    connectedDuration,\n    isOutbound,\n    lastPingDuration,\n    syncState: {\n      bestKnownHeaderHash: sync_state.best_known_header_hash,\n      bestKnownHeaderNumber: sync_state.best_known_header_number,\n      canFetchCount: sync_state.can_fetch_count,\n      inflightCount: sync_state.inflight_count,\n      lastCommonHeaderHash: sync_state.last_common_header_hash,\n      lastCommonHeaderNumber: sync_state.last_common_header_number,\n      unknownHeaderListSize: sync_state.unknown_header_list_size,\n    },\n    ...rest,\n  };\n};\nconst toTxPoolInfo = (info: RPC.TxPoolInfo): CKBComponents.TxPoolInfo => {\n  if (!info) return info;\n  const {\n    last_txs_updated_at: lastTxsUpdatedAt,\n    tip_hash: tipHash,\n    tip_number: tipNumber,\n    total_tx_cycles: totalTxCycles,\n    total_tx_size: totalTxSize,\n    min_fee_rate: minFeeRate,\n    ...rest\n  } = info;\n  return {\n    lastTxsUpdatedAt,\n    tipHash,\n    tipNumber,\n    totalTxCycles,\n    totalTxSize,\n    minFeeRate,\n    ...rest,\n  };\n};\nconst toPeers = (\n  nodes: RPC.RemoteNodeInfo[]\n): CKBComponents.RemoteNodeInfo[] => {\n  if (!Array.isArray(nodes)) return [];\n  return nodes.map(toRemoteNodeInfo);\n};\nconst toCell = (cell: RPC.Cell): CKBComponents.Cell => {\n  if (!cell) return cell;\n  const { lock, type, ...rest } = cell;\n  return {\n    lock: toScript(lock),\n    type: type ? toScript(type) : undefined,\n    ...rest,\n  };\n};\nconst toLiveCell = (liveCell: RPC.LiveCell): CKBComponents.LiveCell => {\n  if (!liveCell) return liveCell;\n  const { data, output, ...rest } = liveCell;\n  return {\n    data,\n    output: toOutput(output),\n    ...rest,\n  };\n};\nconst toLiveCellWithStatus = (cellWithStatus: {\n  cell: RPC.LiveCell;\n  status: string;\n}): { cell: CKBComponents.LiveCell; status: string } => {\n  if (!cellWithStatus) return cellWithStatus;\n  const { cell, ...rest } = cellWithStatus;\n  return {\n    cell: toLiveCell(cell),\n    ...rest,\n  };\n};\nconst toCells = (cells: RPC.Cell[]): CKBComponents.Cell[] => {\n  if (!Array.isArray(cells)) return [];\n  return cells.map(toCell);\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst toCellIncludingOutPoint = (cell: RPC.CellIncludingOutPoint) => {\n  if (!cell) return cell;\n  const {\n    lock,\n    block_hash: blockHash,\n    out_point,\n    output_data_len: outputDataLen,\n    ...rest\n  } = cell;\n  return {\n    blockHash,\n    lock: toScript(lock),\n    outPoint: toOutPoint(out_point),\n    outputDataLen,\n    ...rest,\n  };\n};\nconst toCellsIncludingOutPoint = (\n  cells: RPC.CellIncludingOutPoint[]\n): CKBComponents.CellIncludingOutPoint[] => {\n  if (!Array.isArray(cells)) return [];\n  return cells.map(toCellIncludingOutPoint);\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst toTransactionWithStatus = (txWithStatus: RPC.TransactionWithStatus) => {\n  if (!txWithStatus) return txWithStatus;\n  const {\n    transaction,\n    tx_status: { block_hash: blockHash, status },\n    ...rest\n  } = txWithStatus;\n  return {\n    transaction: toTransaction(transaction),\n    txStatus: {\n      blockHash,\n      status,\n    },\n    ...rest,\n  };\n};\nconst toEpoch = (epoch: RPC.Epoch): CKBComponents.Epoch => {\n  if (!epoch) return epoch;\n  const {\n    start_number: startNumber,\n    compact_target: compactTarget,\n    ...rest\n  } = epoch;\n  return {\n    compactTarget,\n    startNumber,\n    ...rest,\n  };\n};\nconst toTransactionPoint = (\n  transactionPoint: RPC.TransactionPoint\n): CKBComponents.TransactionPoint => {\n  if (!transactionPoint) return transactionPoint;\n  const {\n    block_number: blockNumber,\n    tx_hash: txHash,\n    ...rest\n  } = transactionPoint;\n  return {\n    blockNumber,\n    txHash,\n    ...rest,\n  };\n};\nconst toTransactionsByLockHash = (\n  transactions: RPC.TransactionsByLockHash\n): CKBComponents.TransactionsByLockHash => {\n  if (!transactions) return transactions;\n  return transactions.map((tx) => ({\n    consumedBy: tx.consumed_by\n      ? toTransactionPoint(tx.consumed_by)\n      : tx.consumed_by,\n    createdBy: toTransactionPoint(tx.created_by),\n  }));\n};\nconst toLiveCellsByLockHash = (\n  cells: RPC.LiveCellsByLockHash\n): CKBComponents.LiveCellsByLockHash => {\n  if (!cells) return cells;\n  return cells.map((cell) => ({\n    cellOutput: toCell(cell.cell_output),\n    createdBy: toTransactionPoint(cell.created_by),\n    cellbase: cell.cellbase,\n    outputDataLen: cell.output_data_len,\n  }));\n};\nconst toLockHashIndexState = (\n  index: RPC.LockHashIndexState\n): CKBComponents.LockHashIndexState => {\n  if (!index) return index;\n  const {\n    block_hash: blockHash,\n    block_number: blockNumber,\n    lock_hash: lockHash,\n    ...rest\n  } = index;\n  return {\n    blockHash,\n    blockNumber,\n    lockHash,\n    ...rest,\n  };\n};\nconst toLockHashIndexStates = (\n  states: RPC.LockHashIndexStates\n): CKBComponents.LockHashIndexStates => {\n  if (!states) return states;\n  return states.map(toLockHashIndexState);\n};\nconst toBannedAddress = (\n  bannedAddress: RPC.BannedAddress\n): CKBComponents.BannedAddress => {\n  if (!bannedAddress) return bannedAddress;\n  const {\n    ban_reason: banReason,\n    ban_until: banUntil,\n    created_at: createdAt,\n    ...rest\n  } = bannedAddress;\n  return {\n    banReason,\n    banUntil,\n    createdAt,\n    ...rest,\n  };\n};\nconst toBannedAddresses = (\n  bannedAddresses: RPC.BannedAddresses\n): CKBComponents.BannedAddresses => {\n  if (!bannedAddresses) return bannedAddresses;\n  return bannedAddresses.map((banAddr) => toBannedAddress(banAddr));\n};\nconst toCellbaseOutputCapacityDetails = (\n  details: RPC.CellbaseOutputCapacityDetails\n): CKBComponents.CellbaseOutputCapacityDetails => {\n  if (!details) return details;\n  const { proposal_reward: proposalReward, tx_fee: txFee, ...rest } = details;\n  return {\n    proposalReward,\n    txFee,\n    ...rest,\n  };\n};\n\nconst toFeeRate = (feeRateObj: RPC.FeeRate): CKBComponents.FeeRate => {\n  if (!feeRateObj) {\n    return feeRateObj;\n  }\n  const { fee_rate: feeRate, ...rest } = feeRateObj;\n  return {\n    feeRate,\n    ...rest,\n  };\n};\nconst toCapacityByLockHash = (\n  capacityByLockHash: RPC.CapacityByLockHash\n): CKBComponents.CapacityByLockHash => {\n  if (!capacityByLockHash) {\n    return capacityByLockHash;\n  }\n  const {\n    cells_count: cellsCount,\n    block_number: blockNumber,\n    capacity,\n    ...rest\n  } = capacityByLockHash;\n  return {\n    blockNumber,\n    capacity,\n    cellsCount,\n    ...rest,\n  };\n};\nconst toBlockEconomicState = (\n  blockEconomicState: RPC.BlockEconomicState\n): CKBComponents.BlockEconomicState => {\n  if (!blockEconomicState) {\n    return blockEconomicState;\n  }\n  const {\n    finalized_at: finalizedAt,\n    miner_reward: minerReward,\n    txs_fee: txsFee,\n    ...rest\n  } = blockEconomicState;\n  return {\n    finalizedAt,\n    minerReward,\n    txsFee,\n    ...rest,\n  };\n};\nconst toSyncState = (state: RPC.SyncState): CKBComponents.SyncState => {\n  if (!state) {\n    return state;\n  }\n  return {\n    bestKnownBlockNumber: state.best_known_block_number,\n    bestKnownBlockTimestamp: state.best_known_block_timestamp,\n    fastTime: state.fast_time,\n    ibd: state.ibd,\n    inflightBlocksCount: state.inflight_blocks_count,\n    lowTime: state.low_time,\n    normalTime: state.normal_time,\n    orphanBlocksCount: state.orphan_blocks_count,\n  };\n};\nconst toTransactionProof = (\n  proof: RPC.TransactionProof\n): CKBComponents.TransactionProof => {\n  if (!proof) {\n    return proof;\n  }\n  const {\n    block_hash: blockHash,\n    witnesses_root: witnessesRoot,\n    ...rest\n  } = proof;\n  return {\n    blockHash,\n    witnessesRoot,\n    ...rest,\n  };\n};\nconst toConsensus = (consensus: RPC.Consensus): CKBComponents.Consensus => {\n  if (!consensus) return consensus;\n  return {\n    blockVersion: consensus.block_version,\n    cellbaseMaturity: consensus.cellbase_maturity,\n    daoTypeHash: consensus.dao_type_hash,\n    epochDurationTarget: consensus.epoch_duration_target,\n    genesisHash: consensus.genesis_hash,\n    id: consensus.id,\n    initialPrimaryEpochReward: consensus.initial_primary_epoch_reward,\n    maxBlockBytes: consensus.max_block_bytes,\n    maxBlockCycles: consensus.max_block_cycles,\n    maxBlockProposalsLimit: consensus.max_block_proposals_limit,\n    maxUnclesNum: consensus.max_uncles_num,\n    medianTimeBlockCount: consensus.median_time_block_count,\n    orphanRateTarget: consensus.orphan_rate_target,\n    permanentDifficultyInDummy: consensus.permanent_difficulty_in_dummy,\n    primaryEpochRewardHalvingInterval:\n      consensus.primary_epoch_reward_halving_interval,\n    proposerRewardRatio: consensus.proposer_reward_ratio,\n    secondaryEpochReward: consensus.secondary_epoch_reward,\n    secp256k1Blake160MultisigAllTypeHash:\n      consensus.secp256k1_blake160_multisig_all_type_hash,\n    secp256k1Blake160SighashAllTypeHash:\n      consensus.secp256k1_blake160_sighash_all_type_hash,\n    txProposalWindow: consensus.tx_proposal_window,\n    txVersion: consensus.tx_version,\n    typeIdCodeHash: consensus.type_id_code_hash,\n    hardforkFeatures:\n      consensus.hardfork_features?.map(\n        ({ epoch_number: epochNumber, ...rest }) => ({\n          epochNumber,\n          ...rest,\n        })\n      ) ?? consensus.hardfork_features,\n  };\n};\n\nconst toRawTxPool = (rawTxPool: RPC.RawTxPool): CKBComponents.RawTxPool => {\n  if (!rawTxPool) return rawTxPool;\n\n  if (isTxPoolIds(rawTxPool)) {\n    return rawTxPool;\n  }\n\n  const toTxVerbosity = ({\n    ancestors_count: ancestorsCount,\n    ancestors_cycles: ancestorsCycles,\n    ancestors_size: ancestorsSize,\n    ...rest\n  }: RPC.TxVerbosity): CKBComponents.TxVerbosity => ({\n    ancestorsCount,\n    ancestorsCycles,\n    ancestorsSize,\n    ...rest,\n  });\n  const proposed: Record<CKBComponents.Hash256, CKBComponents.TxVerbosity> = {};\n  const pending: Record<CKBComponents.Hash256, CKBComponents.TxVerbosity> = {};\n\n  Object.keys(rawTxPool.proposed).forEach((hash) => {\n    proposed[hash] = toTxVerbosity(rawTxPool.proposed[hash]);\n  });\n\n  Object.keys(rawTxPool.pending).forEach((hash) => {\n    pending[hash] = toTxVerbosity(rawTxPool.pending[hash]);\n  });\n\n  return { proposed, pending };\n};\n\nconst toIndexerCell = (\n  indexerCell: RPC.IndexerCell\n): CKBComponents.IndexerCell => {\n  if (!indexerCell) return indexerCell;\n  return {\n    blockNumber: indexerCell.block_number,\n    outPoint: toOutPoint(indexerCell.out_point),\n    output: toOutput(indexerCell.output),\n    outputData: indexerCell.output_data,\n    txIndex: indexerCell.tx_index,\n  };\n};\n\nconst toGetCellsResult = (\n  getCellsResult: RPC.GetLiveCellsResult\n): CKBComponents.GetLiveCellsResult => ({\n  lastCursor: getCellsResult.last_cursor,\n  objects: getCellsResult.objects.map((object) => toIndexerCell(object)),\n});\n\nconst isUngroupedIndexerTransaction = (\n  value: RPC.GroupedIndexerTransaction | RPC.UngroupedIndexerTransaction\n): value is RPC.UngroupedIndexerTransaction => {\n  if ((value as RPC.GroupedIndexerTransaction).cells) {\n    return false;\n  }\n\n  return true;\n};\n\nconst toIndexerTransaction = (\n  indexerTransaction:\n    | RPC.GroupedIndexerTransaction\n    | RPC.UngroupedIndexerTransaction\n):\n  | CKBComponents.GroupedIndexerTransaction\n  | CKBComponents.UngroupedIndexerTransaction => {\n  if (!indexerTransaction) return indexerTransaction;\n  if (isUngroupedIndexerTransaction(indexerTransaction)) {\n    return {\n      txHash: indexerTransaction.tx_hash,\n      blockNumber: indexerTransaction.block_number,\n      ioIndex: indexerTransaction.io_index,\n      ioType: indexerTransaction.io_type,\n      txIndex: indexerTransaction.tx_index,\n    };\n  }\n\n  return {\n    txHash: indexerTransaction.tx_hash,\n    txIndex: indexerTransaction.tx_index,\n    blockNumber: indexerTransaction.block_number,\n    cells: indexerTransaction.cells,\n  };\n};\n\nconst toGetTransactionsResult = <Goruped extends boolean = false>(\n  getTransactionsResult: RPC.GetTransactionsResult<Goruped>\n): CKBComponents.GetTransactionsResult<Goruped> => {\n  if (!getTransactionsResult) return getTransactionsResult;\n\n  return {\n    lastCursor: getTransactionsResult.last_cursor,\n    objects: getTransactionsResult.objects.map(\n      (object) =>\n        toIndexerTransaction(\n          object\n        ) as CKBComponents.IndexerTransaction<Goruped>\n    ),\n  };\n};\n\nconst toCellsCapacity = (\n  cellsCapacity: RPC.CellsCapacity\n): CKBComponents.CellsCapacity => {\n  if (!cellsCapacity) return cellsCapacity;\n  return {\n    capacity: cellsCapacity.capacity,\n    blockHash: cellsCapacity.block_hash,\n    blockNumber: cellsCapacity.block_number,\n  };\n};\n\nconst toBlockFilter = (\n  blockFilter: RPC.BlockFilter\n): CKBComponents.BlockFilter => {\n  return {\n    hash: blockFilter.hash,\n    data: blockFilter.data,\n  };\n};\n\nconst toTransactionAndWitnessProof = (\n  proof: RPC.TransactionAndWitnessProof\n): CKBComponents.TransactionAndWitnessProof => {\n  return {\n    blockHash: proof.block_hash,\n    transactionsProof: proof.transactions_proof,\n    witnessesProof: proof.witnesses_proof,\n  };\n};\n\nconst toFeeRateStatistics = (\n  statistics: RPC.FeeRateStatistics\n): CKBComponents.FeeRateStatistics => {\n  return {\n    mean: statistics.mean,\n    median: statistics.median,\n  };\n};\n\nconst toForkBlockResult = (\n  result: RPC.BlockView | RPC.SerializedBlock\n): CKBComponents.BlockView | CKBComponents.SerializedBlock => {\n  if (typeof result === \"string\") {\n    return result;\n  }\n\n  return {\n    header: toHeader(result.header),\n    uncles: result.uncles.map(toUncleBlock),\n    transactions: result.transactions.map(toTransaction),\n    proposals: result.proposals,\n  };\n};\n\nconst toEstimateCycles = (\n  cycle: RPC.EstimateCycles\n): CKBComponents.EstimateCycles => {\n  return {\n    cycles: cycle.cycles,\n  };\n};\n\nexport {\n  toNumber,\n  toHash,\n  toArray,\n  toNullable,\n  toHeader,\n  toScript,\n  toInput,\n  toOutput,\n  toOutPoint,\n  toDepType,\n  toCellDep,\n  toTransaction,\n  toUncleBlock,\n  toBlock,\n  toTip,\n  toAlertMessage,\n  toBlockchainInfo,\n  toLocalNodeInfo,\n  toRemoteNodeInfo,\n  toTxPoolInfo,\n  toPeers,\n  toLiveCell,\n  toLiveCellWithStatus,\n  toCell,\n  toCells,\n  toCellIncludingOutPoint,\n  toCellsIncludingOutPoint,\n  toTransactionWithStatus,\n  toEpoch,\n  toTransactionPoint,\n  toTransactionsByLockHash,\n  toLiveCellsByLockHash,\n  toLockHashIndexState,\n  toLockHashIndexStates,\n  toBannedAddress,\n  toBannedAddresses,\n  toCellbaseOutputCapacityDetails,\n  toFeeRate,\n  toCapacityByLockHash,\n  toBlockEconomicState,\n  toSyncState,\n  toTransactionProof,\n  toConsensus,\n  toRawTxPool,\n  toCellsCapacity,\n  toGetCellsResult,\n  toGetTransactionsResult,\n  toBlockFilter,\n  toTransactionAndWitnessProof,\n  toFeeRateStatistics,\n  toForkBlockResult,\n  toEstimateCycles,\n};\n/* eslint-enable camelcase */\n"],"mappings":"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"}