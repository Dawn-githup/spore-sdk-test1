export declare type ScriptType = "type" | "lock";
import { HexNumber, Script, Transaction, Header } from "@ckb-lumos/base";
export declare enum FetchFlag {
    Fetched = "fetched",
    Fetching = "fetching",
    Added = "added",
    NotFound = "not_found"
}
export declare type FetchHeaderResult = {
    status: FetchFlag.Fetched;
    data: Header;
} | {
    status: FetchFlag.Fetching;
    firstSent: string;
} | {
    status: FetchFlag.Added;
    timestamp: string;
} | {
    status: FetchFlag.NotFound;
};
export declare type TransactionWithHeader = {
    transaction: Transaction;
    header: Header;
};
export declare type FetchTransactionResult = {
    status: FetchFlag.Fetched;
    data: TransactionWithHeader;
} | {
    status: FetchFlag.Fetching;
    firstSent: string;
} | {
    status: FetchFlag.Added;
    timestamp: string;
} | {
    status: FetchFlag.NotFound;
};
export interface LightClientTransactionList<Grouped extends boolean = false> {
    lastCursor: string | undefined;
    objects: LightClientTransaction<Grouped>[];
}
export declare type LightClientTransaction<Goruped extends boolean = false> = Goruped extends true ? GroupedLightClientTransaction : UngroupedLightClientTransaction;
export declare type HexNum = string;
export declare type IOType = "input" | "output" | "both";
export declare type UngroupedLightClientTransaction = {
    transaction: Transaction;
    blockNumber: HexNum;
    ioIndex: HexNum;
    ioType: IOType;
    txIndex: HexNum;
};
export declare type GroupedLightClientTransaction = {
    transaction: Transaction;
    blockNumber: HexNum;
    txIndex: HexNum;
    cells: Array<[IOType, HexNum]>;
};
export declare type LightClientScript = {
    script: Script;
    blockNumber: HexNumber;
    scriptType: ScriptType;
};
//# sourceMappingURL=type.d.ts.map