"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LightClientRPC = void 0;

var _base = require("@ckb-lumos/base");

var _rpc = require("@ckb-lumos/rpc");

var _paramsFormatter = require("@ckb-lumos/ckb-indexer/lib/paramsFormatter");

var _crossFetch = _interopRequireDefault(require("cross-fetch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* c8 ignore next 100 */
class LightClientRPC {
  /**
   *
   * @param uri light client uri
   */
  constructor(uri) {
    this.uri = uri;
  }

  async getTipHeader() {
    return _base.utils.deepCamel(await request(this.uri, "get_tip_header"));
  }

  async fetchHeader(blockHash) {
    const params = [blockHash];
    return _base.utils.deepCamel(await request(this.uri, "fetch_header", params));
  }

  async getHeader(blockHash) {
    const params = [blockHash];
    return _base.utils.deepCamel(await request(this.uri, "get_header", params));
  }

  async fetchTransaction(txHash) {
    const params = [txHash];
    return _base.utils.deepCamel(await request(this.uri, "fetch_transaction", params));
  }

  async getTransaction(txHash) {
    const params = [txHash];
    return _base.utils.deepCamel(await request(this.uri, "get_transaction", params));
  }

  async sendTransaction(tx) {
    const params = [_rpc.ParamsFormatter.toRawTransaction(tx)];
    return _base.utils.deepCamel(await request(this.uri, "send_transaction", params));
  }

  async getScripts() {
    return _base.utils.deepCamel(await request(this.uri, "get_scripts"));
  }

  async setScripts(scripts) {
    const params = [scripts.map(({
      script,
      scriptType,
      blockNumber
    }) => ({
      script: (0, _paramsFormatter.toScript)(script),
      script_type: scriptType,
      block_number: blockNumber
    }))];
    return _base.utils.deepCamel(await request(this.uri, "set_scripts", params));
  }

  async getCells(searchKey, order, limit, cursor) {
    const params = [(0, _paramsFormatter.toGetCellsSearchKey)(searchKey), order, limit, cursor];
    return _base.utils.deepCamel(await request(this.uri, "get_cells", params));
  }

  async getCellsCapacity(searchKey) {
    const params = [(0, _paramsFormatter.toSearchKey)(searchKey)];
    return _base.utils.deepCamel(await request(this.uri, "get_cells_capacity", params));
  }

  async getGenesisBlock() {
    return _base.utils.deepCamel(await request(this.uri, "get_genesis_block"));
  }

  async getTransactions(searchKey, order, limit, cursor) {
    const params = [(0, _paramsFormatter.toGetTransactionsSearchKey)(searchKey), order, limit, cursor];
    return _base.utils.deepCamel(await request(this.uri, "get_transactions", params));
  }

}
/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */


exports.LightClientRPC = LightClientRPC;

const request = async (ckbIndexerUrl, method, params) => {
  const res = await (0, _crossFetch.default)(ckbIndexerUrl, {
    method: "POST",
    body: JSON.stringify({
      id: 0,
      jsonrpc: "2.0",
      method,
      params
    }),
    headers: {
      "Content-Type": "application/json"
    }
  });

  if (res.status !== 200) {
    throw new Error(`indexer request failed with HTTP code ${res.status}`);
  }

  const data = await res.json();

  if (data.error !== undefined) {
    throw new Error(`indexer request rpc failed with error: ${JSON.stringify(data.error)}`);
  }

  return data.result;
};
/* eslint-enalbe @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */
//# sourceMappingURL=rpc.js.map