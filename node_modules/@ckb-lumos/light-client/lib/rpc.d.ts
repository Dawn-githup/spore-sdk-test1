import { HexString, Header, Block } from "@ckb-lumos/base";
import { CKBComponents } from "@ckb-lumos/rpc/lib/types/api";
import { GetLiveCellsResult, Order, SearchKey, GetCellsSearchKey, GetTransactionsSearchKey } from "@ckb-lumos/ckb-indexer/lib/type";
import { FetchHeaderResult, FetchTransactionResult, LightClientScript, TransactionWithHeader, LightClientTransactionList } from "./type";
export declare class LightClientRPC {
    private uri;
    /**
     *
     * @param uri light client uri
     */
    constructor(uri: string);
    getTipHeader(): Promise<Header>;
    fetchHeader(blockHash: string): Promise<FetchHeaderResult>;
    getHeader(blockHash: string): Promise<Header>;
    fetchTransaction(txHash: string): Promise<FetchTransactionResult>;
    getTransaction(txHash: string): Promise<TransactionWithHeader>;
    sendTransaction(tx: CKBComponents.RawTransaction): Promise<CKBComponents.Hash>;
    getScripts(): Promise<Array<LightClientScript>>;
    setScripts(scripts: Array<LightClientScript>): Promise<void>;
    getCells<WithData extends boolean = true>(searchKey: GetCellsSearchKey<WithData>, order: Order, limit: HexString, cursor?: string): Promise<GetLiveCellsResult<WithData>>;
    getCellsCapacity(searchKey: SearchKey): Promise<CKBComponents.CellsCapacity>;
    getGenesisBlock(): Promise<Block>;
    getTransactions<Grouped extends boolean = false>(searchKey: GetTransactionsSearchKey<Grouped>, order: Order, limit: HexString, cursor?: string): Promise<LightClientTransactionList<Grouped>>;
}
//# sourceMappingURL=rpc.d.ts.map